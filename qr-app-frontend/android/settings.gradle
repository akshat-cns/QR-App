// 1. PLUGIN MANAGEMENT MUST COME FIRST
pluginManagement {
    includeBuild(new File([
        'node', 
        '--print', 
        "require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })"
    ].execute(null, rootDir).text.trim()).getParentFile().toString())
}

// 2. PLUGINS BLOCK NEXT
plugins { 
    id("com.facebook.react.settings") 
}

// 3. DEPENDENCY RESOLUTION CONFIG
dependencyResolutionManagement {
    versionCatalogs {
        reactAndroidLibs {
            from(files(new File([
                'node', 
                '--print', 
                "require.resolve('react-native/package.json')"
            ].execute(null, rootDir).text.trim(), "../gradle/libs.versions.toml")))
        }
    }
}

// 4. INCLUDE STATEMENTS AND OTHER CONFIGURATIONS
include ':expo-sharing'
project(':expo-sharing').projectDir = new File(rootProject.projectDir, '../node_modules/expo-sharing/android')

rootProject.name = 'qr-app-frontend'

// 5. AUTOLINKING CONFIGURATIONS
apply from: new File([
    'node', 
    '--print', 
    "require.resolve('expo/package.json')"
].execute(null, rootDir).text.trim(), "../scripts/autolinking.gradle")
useExpoModules()

include ':app'
includeBuild(new File([
    'node', 
    '--print', 
    "require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })"
].execute(null, rootDir).text.trim()).getParentFile())

// 6. REACT SETTINGS EXTENSION (MOVED AFTER ESSENTIAL BLOCKS)
extensions.configure(com.facebook.react.ReactSettingsExtension) { ex ->
    if (System.getenv('EXPO_USE_COMMUNITY_AUTOLINKING') == '1') {
        ex.autolinkLibrariesFromCommand()
    } else {
        def command = [
            'node',
            '--no-warnings',
            '--eval',
            'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
            'react-native-config',
            '--json',
            '--platform',
            'android'
        ].toList()
        ex.autolinkLibrariesFromCommand(command)
    }
}
